def solve_puzzle(initial, goal):
    def is_goal(state):
        return state == goal

    def move_up(state, i, j):
        new_state = [row[:] for row in state]
        new_state[i][j], new_state[i-1][j] = new_state[i-1][j], new_state[i][j]
        return new_state

    def move_down(state, i, j):
        new_state = [row[:] for row in state]
        new_state[i][j], new_state[i+1][j] = new_state[i+1][j], new_state[i][j]
        return new_state

    def move_left(state, i, j):
        new_state = [row[:] for row in state]
        new_state[i][j], new_state[i][j-1] = new_state[i][j-1], new_state[i][j]
        return new_state

    def move_right(state, i, j):
        new_state = [row[:] for row in state]
        new_state[i][j], new_state[i][j+1] = new_state[i][j+1], new_state[i][j]
        return new_state

    for i in range(3):
        for j in range(3):
            if initial[i][j] == 0:
                for _ in range(4):
                    if i > 0:
                        new_state = move_up(initial, i, j)
                        if is_goal(new_state):
                            return new_state
                    if i < 2:
                        new_state = move_down(initial, i, j)
                        if is_goal(new_state):
                            return new_state
                    if j > 0:
                        new_state = move_left(initial, i, j)
                        if is_goal(new_state):
                            return new_state
                    if j < 2:
                        new_state = move_right(initial, i, j)
                        if is_goal(new_state):
                            return new_state

initial = [[1, 2, 3], [5, 6, 0], [7, 8, 4]]
goal = [[0, 1, 2], [3, 4, 5], [6, 7, 8]]
path = solve_puzzle(initial, goal)

if path is not None:
    print(' '.join(str(x) for x in path[0]))
    print(' '.join(str(x) for x in path[1]))
    print(' '.join(str(x) for x in path[2]))
else:
    print("No solution found")
